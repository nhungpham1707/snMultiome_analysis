harmony_options            package:harmony             R Documentation

_S_e_t _a_d_v_a_n_c_e_d _o_p_t_i_o_n_s _f_o_r _R_u_n_H_a_r_m_o_n_y

_D_e_s_c_r_i_p_t_i_o_n:

     Set advanced options for RunHarmony

_U_s_a_g_e:

     harmony_options(
       alpha = 0.2,
       tau = 0,
       block.size = 0.05,
       max.iter.cluster = 20,
       epsilon.cluster = 0.001,
       epsilon.harmony = 0.01
     )
     
_A_r_g_u_m_e_n_t_s:

   alpha: When setting lambda = NULL and use lambda estimation mode,
          lambda would be determined by the expected number of cells
          assuming idependece between batches and clusters. i.e.,
          lambda = alpha * expected number of cells, default 0.2 and
          alpha should be 0 < alpha < 1

     tau: Protection against overclustering small datasets with large
          ones. `tau` is the expected number of cells per cluster.

block.size: What proportion of cells to update during clustering.
          Between 0 to 1, default 0.05. Larger values may be faster but
          less accurate.

max.iter.cluster: Maximum number of rounds to run clustering at each
          round of Harmony.

epsilon.cluster: Convergence tolerance for clustering round of Harmony.
          Set to -Inf to never stop early.

epsilon.harmony: Convergence tolerance for Harmony. Set to -Inf to
          never stop early. When `epsilon.harmony` is set to not NULL,
          then user-supplied values of `early_stop` is ignored.

_V_a_l_u_e:

     Return a list for `.options` argument of `RunHarmony`

_E_x_a_m_p_l_e_s:

     ## If want to set lambda to be fixed to 1, do
     ## Not run:
     
     RunHarmony(data_meta, meta_data, vars_use,
                   .options = harmony_options(lambda = c(1, 1)))
     ## End(Not run)
     

